@attribute [Authorize]
@page "/folders"
@using Services
@using DB.Models
@using Validation.Models
@using Exceptions
@inject AuthorisedFolderService folderService


@if (loading)
{
        <Loader />
}
<FolderDialog OnDataSave="CreateFolder" />
<CascadingValue Value="this">
    <FoldersList Folders="folders.Values.ToList().OrderBy(folder => folder.CreationDate).ToList()" />
</CascadingValue>

@code {

    public Dictionary<string, Folder> folders = new ();
    private bool loading = true;

    public ErrorLogger Logger { get; set; } = null!;
    
    
    public async Task CreateFolder(FolderDataModel folderData)
    {
        try
        {
            var createdFolder = await folderService.Create(new Folder
                {
                    Name = folderData.Name
                });
            folders[createdFolder.ID] = createdFolder;
        }
        catch (ServiceException error)
        {
            Logger.Log(error);
        }
        StateHasChanged();
    }

    public async Task UpdateFoldersList()
    {
        try
        {
            var usersFolders = await folderService.GetAll();
            System.Console.WriteLine(usersFolders.Count());
            folders = usersFolders.ToDictionary((folder) => folder.ID);
            loading = false;
        }
        catch (ServiceException error)
        {
            Logger.Log(error);
        }
    }

    protected override async void OnInitialized()
    {
        try
        {
            var usersFolders = await folderService.GetAll();

            folders = usersFolders.ToDictionary((folder) => folder.ID);
            loading = false;
        }
        catch (ServiceException error)
        {
            Logger.Log(error);
        }
        StateHasChanged();
    }

    public async Task DeleteFolder(string id)
    {
        try
        {
            await folderService.Delete(id);

            folders.Remove(id);
        }
        catch (ServiceException error)
        {
            Logger.Log(error);
        }
        StateHasChanged();
    }

    public async Task RenameFolder(Folder folder, string name)
    {
        try
        {
            var updated = await folderService.RenameFolder(folder.ID, name);
            folders[updated.ID] = updated;
        }
        catch (ServiceException error)
        {
            Logger.Log(error);
        }
        StateHasChanged();
    }

    public async Task LeaveFolder(Folder folder) {
        try
        {
            await folderService.LeaveFolder(folder);
            folders.Remove(folder.ID);
        }
        catch (ServiceException error)
        {
            Logger.Log(error);
        }
        StateHasChanged();
    } 
}

